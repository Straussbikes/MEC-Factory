{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport axios from 'axios';\nimport { ref } from \"vue\";\nimport { useUserStore } from '@/services/user-store';\n\n// Import your user store\n\nconst userStore = useUserStore();\nexport default {\n  data() {\n    return {\n      user: null,\n      switchMe: false,\n      email: localStorage.getItem(\"emaila\"),\n      tableData: []\n    };\n  },\n  mounted() {\n    this.fetchData();\n    const serializedData = JSON.stringify(this.tableData);\n\n    // Save the serialized data to local storage when the page unloads\n    const savedTableData = localStorage.getItem('tableData');\n    if (savedTableData) {\n      this.tableData = JSON.parse(savedTableData);\n      console.log(this.tableData);\n    }\n\n    // Define um intervalo para buscar dados a cada 5 segundos (ou o valor que desejar)\n    setInterval(this.fetchData, 500); // 5000 milissegundos = 5 segundos\n  },\n\n  methods: {\n    handleSwitchChange() {\n      if (this.switchMe) {\n        this.handleSwitchOn();\n      } else {\n        this.handleSwitchOff();\n      }\n    },\n    handleSwitchOn() {\n      console.log('Switch is ON (spinning)');\n    },\n    handleSwitchOff() {\n      // Function to execute when the switch is turned off (not spinning)\n      // Add your code here\n      console.log('Switch is OFF (not spinning)');\n    },\n    async downloadData() {\n      try {\n        // Realize uma chamada ao backend para obter os dados em um formato adequado\n\n        const data = JSON.stringify(this.tableData, null, 2); // Assumindo que os dados são retornados no formato apropriado\n\n        // Crie um Blob com os dados\n        const blob = new Blob([data], {\n          type: 'application/txt'\n        });\n\n        // Crie uma URL temporária para o Blob\n        const url = window.URL.createObjectURL(blob);\n\n        // Crie um link de download e clique nele para iniciar o download\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'dados.txt';\n        document.body.appendChild(link);\n        link.click();\n\n        // Libere a URL temporária e remova o link\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(link);\n      } catch (error) {\n        console.error('Erro ao fazer o download:', error);\n      }\n    },\n    openPopupWindow(item) {\n      const userStore = useUserStore();\n      userStore.data = item;\n      const routeData = this.$router.push({\n        name: 'more'\n      });\n    },\n    async fetchData() {\n      // Faz uma solicitação HTTP GET para buscar os dados do backend\n      try {\n        const response = await axios({\n          method: 'GET',\n          url: '/data',\n          headers: {\n            'Authorization': \"Bearer \" + userStore.token\n          },\n          params: {\n            email: this.email\n          }\n        });\n        let found = false;\n        const data = JSON.stringify(response.data);\n        if (response.data != null) {\n          for (let i = 0; i < this.tableData.length; i++) {\n            const compare = JSON.stringify(this.tableData[i]);\n            if (compare === data) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            const final = JSON.parse(data);\n            this.tableData.unshift(final);\n            localStorage.setItem('tableData', JSON.stringify(this.tableData));\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    handleDirectoryChange(event) {\n      // Capture the selected directory and store it in selectedDirectory\n      this.selectedDirectory = event.target.files[0].webkitRelativePath;\n    },\n    saveData() {\n      if (!this.selectedDirectory) {\n        // Handle the case where no directory is selected\n        return;\n      }\n\n      // You can now access the selected directory using this.selectedDirectory\n      console.log(\"Selected directory:\", this.selectedDirectory);\n\n      // Implement your logic to save data to the selected directory here\n    }\n  }\n};\n\nuserStore.refreshToken();","map":{"version":3,"names":["axios","ref","useUserStore","userStore","data","user","switchMe","email","localStorage","getItem","tableData","mounted","fetchData","serializedData","JSON","stringify","savedTableData","parse","console","log","setInterval","methods","handleSwitchChange","handleSwitchOn","handleSwitchOff","downloadData","blob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","error","openPopupWindow","item","routeData","$router","push","name","response","method","headers","token","params","found","i","length","compare","final","unshift","setItem","handleDirectoryChange","event","selectedDirectory","target","files","webkitRelativePath","saveData","refreshToken"],"sources":["/home/bikes/Desktop/MECGIT/MEC-Factory/frontend/src/views/Mainpage.vue"],"sourcesContent":["\n<template>\n  <div class=\"page-container\">\n    <div class=\"left-column\">\n      <div class=\"section\">\n        <v-table  height=\"300px\">\n          <thead>\n            <tr>\n              <th>AppId</th>\n              <th>Request</th>\n              <th>Error Code</th>\n              <th>Date</th>\n              <th>More</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(item, index) in tableData\" :key=\"index\">\n              <td>{{ item.appId }}</td>\n              <td>{{ item.request }}</td>\n              <td>{{ item.erro }}</td>\n              <td>{{ item.date }}</td>\n              <td>  \n              <button\n                @click=\"openPopupWindow(item)\"\n              >More</button>\n              </td>\n            </tr>\n          </tbody>\n        </v-table>\n      </div>\n    </div>\n    <div class=\"section\">\n      <div class=\"section switch-section\">\n      <v-switch   \n      v-model=\"switchMe\" class=\"custom-switch\"  @input=\"handleSwitchChange\">\n        <template v-slot:label >\n          <h1 class=\"white-text\">Turn On MEP</h1>\n          <v-progress-circular\n           \n            :indeterminate=\"switchMe\"\n            size=\"24\"\n            class=\"loading-spinner\"\n          ></v-progress-circular>\n        </template>\n      </v-switch>\n      </div>\n      <div v-if=\"switchMe\" >\n        <h1 class=\"white-texts\">Use this to connect to MEP http://0.0.0.0:8000/{{ email }}/</h1>\n      </div>\n      <div class=\"download\"> \n      <v-btn @click=\"downloadData\">Download Data</v-btn>\n    </div>\n    </div>  \n  </div>\n \n\n</template>\n\n<script>\n\nimport axios from 'axios';\nimport {ref} from \"vue\";\nimport { useUserStore } from '@/services/user-store';\n\n // Import your user store\n\nconst userStore = useUserStore();\n\n\nexport default {\n\n  data() {\n    return {\n      user:null,\n      switchMe: false,\n      email:localStorage.getItem(\"emaila\"),\n      tableData:[],\n      \n    };\n  },\n\n\n  mounted(){\n       \n    this.fetchData();\n    const serializedData = JSON.stringify(this.tableData);\n\n// Save the serialized data to local storage when the page unloads\nconst savedTableData = localStorage.getItem('tableData');\n  if (savedTableData) {\n    this.tableData = JSON.parse(savedTableData);\n    console.log(this.tableData)\n  }\n\n// Define um intervalo para buscar dados a cada 5 segundos (ou o valor que desejar)\n    setInterval(this.fetchData, 500); // 5000 milissegundos = 5 segundos\n  },\n  methods: {\n    handleSwitchChange() {\n      if (this.switchMe) {\n        this.handleSwitchOn();\n      } else {\n        this.handleSwitchOff();\n      }\n    },\n    handleSwitchOn() {\n      \n      console.log('Switch is ON (spinning)');\n    },\n    handleSwitchOff() {\n      // Function to execute when the switch is turned off (not spinning)\n      // Add your code here\n      console.log('Switch is OFF (not spinning)');\n    },\n\n    async downloadData() {\n      try {\n        // Realize uma chamada ao backend para obter os dados em um formato adequado\n        \n        const data = JSON.stringify(this.tableData, null, 2) // Assumindo que os dados são retornados no formato apropriado\n\n        // Crie um Blob com os dados\n        const blob = new Blob([data], { type: 'application/txt' });\n\n        // Crie uma URL temporária para o Blob\n        const url = window.URL.createObjectURL(blob);\n\n        // Crie um link de download e clique nele para iniciar o download\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'dados.txt';\n        document.body.appendChild(link);\n        link.click();\n\n        // Libere a URL temporária e remova o link\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(link);\n      } catch (error) {\n        console.error('Erro ao fazer o download:', error);\n      }\n    },\n    openPopupWindow(item) {\n      const userStore = useUserStore();\n      userStore.data=item;\n      \n      const routeData = this.$router.push({ name: 'more'});\n    \n    }, \n     async fetchData(){\n\n      \n      // Faz uma solicitação HTTP GET para buscar os dados do backend\n      try {\n              const response =  await axios({\n                method: 'GET',\n                url:'/data',\n                headers:{\n                  'Authorization':\"Bearer \" + userStore.token,\n                \n                },\n                params: {\n                     email: this.email, \n                  },\n              })\n             let found = false;\n             const data=JSON.stringify(response.data);\n           \n             if(response.data != null){\n                  for (let i = 0; i < this.tableData.length; i++) {\n                      const compare=JSON.stringify(this.tableData[i])\n                        if (compare=== data) {\n                           found = true;\n                           break;\n                        }\n                  }\n                 if(!found){\n                  const final=JSON.parse(data)\n                  this.tableData.unshift(final)\n                  localStorage.setItem('tableData', JSON.stringify(this.tableData));\n                 }\n             }\n    \n          } catch (error) {\n            console.error('Error fetching data:', error);\n          }\n    \n    }, \n    handleDirectoryChange(event) {\n      // Capture the selected directory and store it in selectedDirectory\n      this.selectedDirectory = event.target.files[0].webkitRelativePath;\n    },\n    saveData() {\n      if (!this.selectedDirectory) {\n        // Handle the case where no directory is selected\n        return;\n      }\n\n      // You can now access the selected directory using this.selectedDirectory\n      console.log(\"Selected directory:\", this.selectedDirectory);\n\n      // Implement your logic to save data to the selected directory here\n    },\n  }\n};\n   userStore.refreshToken();\n</script>\n\n\n\n\n\n<style scoped>\n\n.white-texts{\n  display: flex;\n  color: white;\n  font-size:20px;\n  margin-bottom:100px;\n}\n.page-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0px; /* Adjust the gap as needed */\n  height: 100vh;\n}\n\n.left-column {\n  display: flex;\n  flex-direction: column;\n  align-items: center; /* Center contents horizontally */\n  justify-content: flex-start; /* Center contents vertically */\n  height: 100%; /* Make the left column fill the entire height of its container */\n  margin-top: 150px;\n}\n\n\n\n.download\n{\n  padding: 100px; /* Adjust the padding as needed */\n  margin-top: 0px; /* Add margin to move the table down */\n}\n\n.white-text {\n  color: white;\n  font-size:20px;\n  \n}\n\n\n.loading-spinner {\n  /* Rotate the loading spinner when the switch is toggled (green) */\n  animation: spin 1s linear infinite;\n  color:white;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.section {\n  padding: 20px;\n}\n.switch-section {\n  display: flex;\n  justify-content: flex-end; /* Position switch to the right */\n  align-items: center; /* Center switch vertically */\n  /* Add background color if needed */\n  padding: 100px; /* Add padding for spacing */\n}\n.hide-background {\n  display: flex;\n  background-color: transparent !important; /* Set background to transparent */\n}\n\n\n.custom-table {\n  height: 300px;\n  border-collapse: collapse; /* Collapse borders to prevent spacing */\n  width: 80%; /* Adjust the width as needed */\n  border: 2px solid black; /* Add black border to the table */\n}\n\n/* Add black borders to the table and its cells */\n\n\n</style>\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}