{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport { useUserStore } from '@/services/user-store';\nimport More from '@/views/More.vue';\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: HomeView\n}, {\n  path: '/about',\n  name: 'about',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"about\" */'../views/AboutView.vue')\n}, {\n  path: '/more',\n  name: 'more',\n  component: More,\n  props: true // Pass route params as props\n}, {\n  path: '/flex',\n  name: 'flex',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"about\" */'../views/Mainflex.vue')\n}, {\n  path: '/contact',\n  name: 'contact',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"contact\" */'../views/Contactus.vue')\n}, {\n  path: '/register',\n  name: 'Register',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"contact\" */'../views/Register.vue')\n}, {\n  path: '/main',\n  name: 'main',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"main\" */'../views/Mainpage.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/login',\n  name: 'Login',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"main\" */'../views/Login.vue')\n}, {\n  path: '/bruh',\n  component: () => import( /* webpackChunkName: \"main\" */'../views/Login.vue')\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const userStore = useUserStore();\n  if (to.matched.some(route => route.meta.requiresAuth)) {\n    // Verifique se a rota requer autenticação\n    if (!userStore.isLoggedIn) {\n      // Se o usuário não estiver autenticado, redirecione para a página de login\n      next({\n        name: 'Login'\n      });\n    } else {\n      // Caso contrário, permita o acesso à rota protegida\n      next();\n    }\n  } else {\n    // Se a rota não requer autenticação, permita o acesso diretamente\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","useUserStore","More","routes","path","name","component","props","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","userStore","matched","some","route","isLoggedIn"],"sources":["/home/bikes/Desktop/MECGIT/MEC-Factory/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport { useUserStore } from '@/services/user-store';\nimport More from '@/views/More.vue';\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: HomeView\n  },\n  {\n    path: '/about',\n    name: 'about',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n  },\n  {\n    path: '/more',\n    name: 'more',\n    component: More,\n    props: true,// Pass route params as props\n  },\n  {\n    path: '/flex',\n    name: 'flex',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/Mainflex.vue')\n  },\n  {\n    path: '/contact',\n    name: 'contact',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"contact\" */ '../views/Contactus.vue')\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"contact\" */ '../views/Register.vue')\n  },\n  {\n    path: '/main',\n    name: 'main',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"main\" */ '../views/Mainpage.vue'),\n    meta: { requiresAuth: true },\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"main\" */ '../views/Login.vue')\n  },\n  {\n    path: '/bruh',\n    component:  () => import(/* webpackChunkName: \"main\" */ '../views/Login.vue')\n  },\n\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const userStore= useUserStore();\n  if (to.matched.some((route) => route.meta.requiresAuth)) {\n    // Verifique se a rota requer autenticação\n    if (!userStore.isLoggedIn) {\n      // Se o usuário não estiver autenticado, redirecione para a página de login\n      next({ name: 'Login' });\n    } else {\n      // Caso contrário, permita o acesso à rota protegida\n      next();\n    }\n  } else {\n    // Se a rota não requer autenticação, permita o acesso diretamente\n    next();\n  }\n});\n\nexport default router\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,IAAI,MAAM,kBAAkB;AACnC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEN;AACb,CAAC,EACD;EACEI,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACb;EACA;EACA;EACAC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,wBAAwB;AAClF,CAAC,EACD;EACEF,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEJ,IAAI;EACfK,KAAK,EAAE,IAAI,CAAC;AACd,CAAC,EACD;EACEH,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZ;EACA;EACA;EACAC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,uBAAuB;AACjF,CAAC,EACD;EACEF,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACf;EACA;EACA;EACAC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,iCAAkC,wBAAwB;AACpF,CAAC,EACD;EACEF,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChB;EACA;EACA;EACAC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,iCAAkC,uBAAuB;AACnF,CAAC,EACD;EACEF,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZ;EACA;EACA;EACAC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,8BAA+B,uBAAuB,CAAC;EAC/EE,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACb;EACA;EACA;EACAC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,8BAA+B,oBAAoB;AAC7E,CAAC,EACD;EACEF,IAAI,EAAE,OAAO;EACbE,SAAS,EAAGA,CAAA,KAAM,MAAM,EAAC,8BAA+B,oBAAoB;AAC9E,CAAC,CAEF;AAED,MAAMI,MAAM,GAAGZ,YAAY,CAAC;EAC1Ba,OAAO,EAAEZ,gBAAgB,CAACa,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CX;AACF,CAAC,CAAC;AACFO,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,SAAS,GAAElB,YAAY,EAAE;EAC/B,IAAIe,EAAE,CAACI,OAAO,CAACC,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACd,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD;IACA,IAAI,CAACU,SAAS,CAACI,UAAU,EAAE;MACzB;MACAL,IAAI,CAAC;QAAEb,IAAI,EAAE;MAAQ,CAAC,CAAC;IACzB,CAAC,MAAM;MACL;MACAa,IAAI,EAAE;IACR;EACF,CAAC,MAAM;IACL;IACAA,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}